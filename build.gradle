buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
    }
}

// setup plugins to use
plugins {
    id 'de.fuerstenau.buildconfig' version '1.1.8'
    id 'idea'
    id 'net.minecraftforge.gradle.forge' version '2.0.2'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}

// setup external properties file
ext.configFile = file "build.properties"

// read external properties file
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

// set default version, group and package namespace
version = config.mc_version + '-' + config.mod_version
group = config.mod_group
archivesBaseName = config.mod_name

// if we are building from pipeline, then add build number to the version
if (System.getenv().BUILD_NUMBER)
	version = "${version}.${System.getenv().BUILD_NUMBER}"

// if we are not building with a key, add this to the version
if (!project.hasProperty('signingKeystore')) {
    project.properties.put('signingFingerprint', 'unsigned')
    version = version + '-unsigned'
}

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
	version = "${config.mc_version}-${config.forge_version}"
    runDir = "run"

    mappings = 'stable_39'
    makeObfSourceJar = false
}

dependencies {
	testCompile "junit:junit:4.11"
    testCompile 'org.mockito:mockito-core:2.7.22'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'org.graalvm.js:js:19.1.1'
    compile 'org.graalvm.sdk:graal-sdk:19.1.1'
    compile 'org.graalvm.truffle:truffle-api:19.1.1'
}

buildConfig {
    sourceSets{
        appName = config.mod_name
        main {
            buildConfigField "String", "acceptedVersions", config.accepted_versions
                buildConfigField "String", "fingerprint", project.findProperty('signingFingerprint')
                buildConfigField "String", "updateJSON",
                        config.update_url +
                                '?mkver=' + project.version +
                                '&mcver=' + config.mc_version +
                                '&fmver=' + config.forge_version +
                                '&fngpt=' + project.findProperty('signingFingerprint')
        }
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "mod_version", project.version
    inputs.property "mod_name", config.mod_name
    inputs.property "mc_version", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace variable
        expand 'mod_name':config.mod_name, 'mod_version':project.version, 'mc_version':project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task signJar(dependsOn: ['jar']){
    doLast {
        // Skip the task if our secret data isn't available
        if (project.hasProperty('signingKeystore')) {
            ant.signjar(
                    destDir: "$buildDir/libs",
                    jar: "$buildDir/libs/*.jar",
                    alias: signingAlias,
                    storetype: "jks",
                    keystore: signingKeystore,
                    storepass: signingPassword
            )
        } else {
            println("Skipping jar signing. Signing keystore isn't available.")
        }
    }
}

build.dependsOn signJar

task deobfJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    from sourceSets.main.output
    classifier = 'dev'
    configurations = [project.configurations.compile]
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

tasks.build.dependsOn shadowJar

artifacts 
{
    archives deobfJar
    archives sourcesJar
    archives shadowJar
}

reobf 
{ 
    shadowJar { mappingType = 'SEARGE' } 
}

tasks.reobfShadowJar.mustRunAfter shadowJar