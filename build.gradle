buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

// setup plugins to use
plugins {
    id 'de.fuerstenau.buildconfig' version '1.1.8'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'

// setup external properties file
ext.configFile = file "build.properties"

// read external properties file
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

// set default version, group and package namespace
version = config.mc_version + '-' + config.mod_version
group = config.mod_group
archivesBaseName = config.mod_name

// if we are building from pipeline, then add build number to the version
if (System.getenv().BUILD_NUMBER)
    version = "${version}.${System.getenv().BUILD_NUMBER}"

// if we are not building with a key, add this to the version
if (!project.hasProperty('signingKeystore')) {
    project.properties.put('signingFingerprint', 'unsigned')
    version = version + '-unsigned'
}

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20180921-1.13'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    testCompile "junit:junit:4.11"
    testCompile 'org.mockito:mockito-core:2.7.22'
    minecraft 'net.minecraftforge:forge:1.13.2-25.0.145'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "examplemod",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

buildConfig {
    sourceSets{
        appName = config.mod_name
        main {
            buildConfigField "String", "acceptedVersions", config.accepted_versions
                buildConfigField "String", "fingerprint", project.findProperty('signingFingerprint')
                buildConfigField "String", "updateJSON",
                        config.update_url +
                                '?mkver=' + project.version +
                                '&mcver=' + config.mc_version +
                                '&fmver=' + config.forge_version +
                                '&fngpt=' + project.findProperty('signingFingerprint')
        }
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "mod_version", project.version
    inputs.property "mod_name", config.mod_name
    inputs.property "mc_version", project.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace variable
        expand 'mod_name':config.mod_name, 'mod_version':project.version, 'mc_version':project.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task signJar(dependsOn: ['jar']){
    doLast {
        // Skip the task if our secret data isn't available
        if (project.hasProperty('signingKeystore')) {
            ant.signjar(
                    destDir: "$buildDir/libs",
                    jar: "$buildDir/libs/*.jar",
                    alias: signingAlias,
                    storetype: "jks",
                    keystore: signingKeystore,
                    storepass: signingPassword
            )
        } else {
            println("Skipping jar signing. Signing keystore isn't available.")
        }
    }
}
build.dependsOn signJar
